import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:pu_attendance/main.dart';
import 'package:geolocator/geolocator.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class StudHomePage extends StatefulWidget {
  const StudHomePage({Key? key}) : super(key: key);

  @override
  State<StudHomePage> createState() => _StudHomePageState();
}

class _StudHomePageState extends State<StudHomePage> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final List<String> subjects = [
    'ADS Theory',
    'OT',
    'MOS',
    'ADS Theory Lab',
    'MOS Lab',
    'Robotics',
    'Web Accessibility',
    'Neural Network'
  ];
  String selectedSubject = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Student Dashboard'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primary,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundImage: AssetImage('images/user.bmp'),
                  ),
                  SizedBox(height: 22),
                  Row(
                    children: [
                      Icon(Icons.email, color: Colors.white),
                      SizedBox(width: 8),
                      Text(
                        _auth.currentUser?.email ?? 'Email not found',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            ListTile(
              leading: Icon(Icons.logout),
              title: Text('Logout'),
              onTap: () {
                _logout();
              },
            ),
            ListTile(
              leading: Icon(Icons.info),
              title: Text('About'),
              onTap: () {
                _showAboutDialog();
              },
            ),
          ],
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(height: 0),
            Center( // Center the email
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.email, color: Colors.deepPurple),
                  SizedBox(width: 8),
                  Text(
                    '${_auth.currentUser?.email ?? 'Email not found'}',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
            SizedBox(height: 8),
            Center( // Center the date
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.date_range, color: Colors.deepPurple),
                  SizedBox(width: 8),
                  Text(
                    '${DateTime.now().toString().split(' ')[0]}',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
            SizedBox(height: 16),
            buildRadioButtonList(),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                _markAttendance();
              },
              child: Text('Mark Attendance'),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildRadioButtonList() {
    return Column(
      children: [
        for (String subject in subjects)
          RadioListTile<String>(
            title: Text(subject),
            value: subject,
            groupValue: selectedSubject,
            onChanged: (String? value) {
              setState(() {
                selectedSubject = value ?? '';
              });
            },
          ),
      ],
    );
  }

  void _logout() async {
    await _auth.signOut();
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(builder: (_) => MyHomePage(title: 'M.Sc. Attendance')),
      (Route<dynamic> route) => false,
    );
  }

  void _showAboutDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('About'),
          content: Text('This app was developed by Chandirasegaran.'),
          actions: [
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }

  void _markAttendance() async {
    if (selectedSubject.isEmpty) {
      // No subject selected
      return;
    }

    // Check user location
    Position position = await _getUserLocation();

    double classroomLatitude = 12.015403;
    double classroomLongitude = 79.854978;
    double distanceThreshold = 200; // in meters

    double distanceInMeters = await Geolocator.distanceBetween(
      position.latitude,
      position.longitude,
      classroomLatitude,
      classroomLongitude,
    );

    if (distanceInMeters <= distanceThreshold) {
      // User is within the classroom radius
      String currentDateTime = '${DateTime.now()}';
      String name = _auth.currentUser?.displayName ?? 'Student';

      // Prepare attendance details
      Map<String, dynamic> attendanceDetails = {
        'name': name,
        'email': _auth.currentUser?.email,
        'subject': selectedSubject,
        'datetime': currentDateTime,
        'location': GeoPoint(position.latitude, position.longitude),
      };

      // Store attendance details in Firestore
      await FirebaseFirestore.instance.collection('attendance').add(attendanceDetails);

      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Attendance Marked'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('You are present.'),
                SizedBox(height: 16),
                Text(
                  'Email: ${_auth.currentUser?.email}',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 8),
                Text(
                  'Subject: $selectedSubject',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 8),
                Text(
                  'Date/Time: $currentDateTime',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            actions: [
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Close'),
              ),
            ],
          );
        },
      );
    } else {
      // User is not within the classroom radius
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Attendance Not Marked'),
            content: Text('You are not in the classroom.'),
            actions: [
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Close'),
              ),
            ],
          );
        },
      );
    }
  }

  Future<Position> _getUserLocation() async {
    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw Exception('Location services are disabled.');
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.deniedForever) {
      throw Exception(
          'Location permissions are permanently denied, we cannot request permissions.');
    }

    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission != LocationPermission.whileInUse &&
          permission != LocationPermission.always) {
        throw Exception(
            'Location permissions are denied (actual value: $permission).');
      }
    }

    return await Geolocator.getCurrentPosition();
  }
}


dependencies:
  flutter:
    sdk: flutter
  firebase_auth: ^3.0.0
  cloud_firestore: ^2.0.0
  geolocator: ^8.0.0



// // import 'package:flutter/material.dart';
// // import 'package:firebase_auth/firebase_auth.dart';
// // import 'package:pu_attendance/main.dart';
// // import 'package:pu_attendance/studhome.dart';
// // import 'package:pu_attendance/subjectname.dart';
// //
// // class CrHomePage extends StatefulWidget {
// //   const CrHomePage({Key? key}) : super(key: key);
// //
// //   @override
// //   State<CrHomePage> createState() => _CrHomePageState();
// // }
// //
// // class _CrHomePageState extends State<CrHomePage> {
// //   final FirebaseAuth _auth = FirebaseAuth.instance;
// //   String selectedSubject = '';
// //   late DateTime selectedDate;
// //   late TimeOfDay startTime;
// //   late TimeOfDay endTime;
// //
// //   @override
// //   void initState() {
// //     super.initState();
// //     selectedDate = DateTime.now();
// //     startTime = TimeOfDay.now();
// //     endTime = TimeOfDay.now();
// //     selectedSubject = 'OT'; // Set default selection to 'OT'
// //   }
// //
// //   @override
// //   Widget build(BuildContext context) {
// //     return Scaffold(
// //       appBar: AppBar(
// //         title: Text('CR Dashboard'),
// //         backgroundColor: Theme.of(context).colorScheme.inversePrimary,
// //         automaticallyImplyLeading: false,
// //         actions: [
// //           IconButton(
// //             icon: Icon(Icons.logout),
// //             onPressed: _logout,
// //           ),
// //         ],
// //       ),
// //       body: Center(
// //         child: Padding(
// //           padding: const EdgeInsets.all(16.0),
// //           child: Column(
// //             mainAxisAlignment: MainAxisAlignment.center,
// //             children: [
// //               DropdownButton<String>(
// //                 value: selectedSubject,
// //                 items: [
// //                   for (String subject in SubjectData.subjects)
// //                     DropdownMenuItem(child: Text(subject), value: subject),
// //                 ],
// //                 onChanged: (String? value) {
// //                   setState(() {
// //                     selectedSubject = value!;
// //                   });
// //                 },
// //                 hint: Text('Select Subject'),
// //               ),
// //               SizedBox(height: 16.0),
// //               ElevatedButton(
// //                 onPressed: _selectDate,
// //                 child: Text('Select Date'),
// //               ),
// //               Text('Selected Date: ${selectedDate.toString().split(' ')[0]}'),
// //               SizedBox(height: 16.0),
// //               ElevatedButton(
// //                 onPressed: _selectStartTime,
// //                 child: Text('Select Start Time'),
// //               ),
// //               Text('Selected Start Time: ${_formatTimeOfDay(startTime)}'),
// //               SizedBox(height: 16.0),
// //               ElevatedButton(
// //                 onPressed: _selectEndTime,
// //                 child: Text('Select End Time'),
// //               ),
// //               Text('Selected End Time: ${_formatTimeOfDay(endTime)}'),
// //             ],
// //           ),
// //         ),
// //       ),
// //     );
// //   }
// //
// //   void _logout() async {
// //     await _auth.signOut();
// //     Navigator.of(context).pushAndRemoveUntil(
// //       MaterialPageRoute(builder: (_) => MyHomePage(title: 'M.Sc. Attendance')),
// //       (Route<dynamic> route) => false,
// //     );
// //   }
// //
// //   Future<void> _selectDate() async {
// //     final DateTime? picked = await showDatePicker(
// //       context: context,
// //       initialDate: selectedDate,
// //       firstDate: DateTime.now(),
// //       lastDate: DateTime(2100),
// //     );
// //     if (picked != null && picked != selectedDate) {
// //       setState(() {
// //         selectedDate = picked;
// //       });
// //     }
// //   }
// //
// //   Future<void> _selectStartTime() async {
// //     final TimeOfDay? picked = await showTimePicker(
// //       context: context,
// //       initialTime: startTime,
// //     );
// //     if (picked != null) {
// //       setState(() {
// //         startTime = picked;
// //       });
// //     }
// //   }
// //
// //   Future<void> _selectEndTime() async {
// //     final TimeOfDay? picked = await showTimePicker(
// //       context: context,
// //       initialTime: endTime,
// //     );
// //     if (picked != null) {
// //       setState(() {
// //         endTime = picked;
// //       });
// //     }
// //   }
// //
// //   String _formatTimeOfDay(TimeOfDay time) {
// //     final hour = time.hour.toString().padLeft(2, '0');
// //     final minute = time.minute.toString().padLeft(2, '0');
// //     return '$hour:$minute';
// //   }
// // }
//
// // // import 'package:flutter/material.dart';
// // // import 'package:firebase_auth/firebase_auth.dart';
// // // import 'package:pu_attendance/main.dart';
// // // import 'package:pu_attendance/studhome.dart';
// // // import 'package:pu_attendance/subjectname.dart';
// // // import 'package:cloud_firestore/cloud_firestore.dart';
// // // import 'package:path_provider/path_provider.dart';
// // // import 'package:csv/csv.dart';
// // // import 'dart:io';
// // // import 'package:permission_handler/permission_handler.dart';
// // //
// // // class CrHomePage extends StatefulWidget {
// // //   const CrHomePage({Key? key}) : super(key: key);
// // //
// // //   @override
// // //   State<CrHomePage> createState() => _CrHomePageState();
// // // }
// // //
// // // class _CrHomePageState extends State<CrHomePage> {
// // //   final FirebaseAuth _auth = FirebaseAuth.instance;
// // //   String selectedSubject = '';
// // //   late DateTime selectedDate;
// // //   late TimeOfDay startTime;
// // //   late TimeOfDay endTime;
// // //
// // //   @override
// // //   void initState() {
// // //     super.initState();
// // //     selectedDate = DateTime.now();
// // //     startTime = TimeOfDay.now();
// // //     endTime = TimeOfDay.now();
// // //     selectedSubject = 'OT'; // Set default selection to 'OT'
// // //   }
// // //
// // //   @override
// // //   Widget build(BuildContext context) {
// // //     return Scaffold(
// // //       appBar: AppBar(
// // //         title: Text('CR Dashboard'),
// // //         backgroundColor: Theme.of(context).colorScheme.inversePrimary,
// // //         automaticallyImplyLeading: false,
// // //         actions: [
// // //           IconButton(
// // //             icon: Icon(Icons.logout),
// // //             onPressed: _logout,
// // //           ),
// // //         ],
// // //       ),
// // //       body: Center(
// // //         child: Padding(
// // //           padding: const EdgeInsets.all(16.0),
// // //           child: Column(
// // //             mainAxisAlignment: MainAxisAlignment.center,
// // //             children: [
// // //               DropdownButton<String>(
// // //                 value: selectedSubject,
// // //                 items: [
// // //                   for (String subject in SubjectData.subjects)
// // //                     DropdownMenuItem(child: Text(subject), value: subject),
// // //                 ],
// // //                 onChanged: (String? value) {
// // //                   setState(() {
// // //                     selectedSubject = value!;
// // //                   });
// // //                 },
// // //                 hint: Text('Select Subject'),
// // //               ),
// // //               SizedBox(height: 16.0),
// // //               ElevatedButton(
// // //                 onPressed: _selectDate,
// // //                 child: Text('Select Date'),
// // //               ),
// // //               Text('Selected Date: ${selectedDate.toString().split(' ')[0]}'),
// // //               SizedBox(height: 16.0),
// // //               ElevatedButton(
// // //                 onPressed: _selectStartTime,
// // //                 child: Text('Select Start Time'),
// // //               ),
// // //               Text('Selected Start Time: ${_formatTimeOfDay(startTime)}'),
// // //               SizedBox(height: 16.0),
// // //               ElevatedButton(
// // //                 onPressed: _selectEndTime,
// // //                 child: Text('Select End Time'),
// // //               ),
// // //               Text('Selected End Time: ${_formatTimeOfDay(endTime)}'),
// // //               SizedBox(height: 16.0),
// // //               ElevatedButton(
// // //                 onPressed: _generateAttendanceCSV,
// // //                 child: Text('View Attendance'),
// // //               ),
// // //             ],
// // //           ),
// // //         ),
// // //       ),
// // //     );
// // //   }
// // //
// // //   void _logout() async {
// // //     await _auth.signOut();
// // //     Navigator.of(context).pushAndRemoveUntil(
// // //       MaterialPageRoute(builder: (_) => MyHomePage(title: 'M.Sc. Attendance')),
// // //       (Route<dynamic> route) => false,
// // //     );
// // //   }
// // //
// // //   Future<void> _selectDate() async {
// // //     final DateTime? picked = await showDatePicker(
// // //       context: context,
// // //       initialDate: selectedDate,
// // //       firstDate: DateTime.now(),
// // //       lastDate: DateTime(2100),
// // //     );
// // //     if (picked != null && picked != selectedDate) {
// // //       setState(() {
// // //         selectedDate = picked;
// // //       });
// // //     }
// // //   }
// // //
// // //   Future<void> _selectStartTime() async {
// // //     final TimeOfDay? picked = await showTimePicker(
// // //       context: context,
// // //       initialTime: startTime,
// // //     );
// // //     if (picked != null) {
// // //       setState(() {
// // //         startTime = picked;
// // //       });
// // //     }
// // //   }
// // //
// // //   Future<void> _selectEndTime() async {
// // //     final TimeOfDay? picked = await showTimePicker(
// // //       context: context,
// // //       initialTime: endTime,
// // //     );
// // //     if (picked != null) {
// // //       setState(() {
// // //         endTime = picked;
// // //       });
// // //     }
// // //   }
// // //
// // //   String _formatTimeOfDay(TimeOfDay time) {
// // //     final hour = time.hour.toString().padLeft(2, '0');
// // //     final minute = time.minute.toString().padLeft(2, '0');
// // //     return '$hour:$minute';
// // //   }
// // //
// // //   Future<void> _generateAttendanceCSV() async {
// // //     // Check if permission is granted
// // //     if (await Permission.storage.isGranted) {
// // //       // Permission already granted, continue with generating the CSV file
// // //       _createCSVFile();
// // //     } else {
// // //       // Permission not granted, request permission
// // //       var status = await Permission.storage.request();
// // //       if (status.isGranted) {
// // //         // Permission granted, continue with generating the CSV file
// // //         _createCSVFile();
// // //       } else {
// // //         // Permission denied, show an error message
// // //         showDialog(
// // //           context: context,
// // //           builder: (context) {
// // //             return AlertDialog(
// // //               title: Text('Permission Denied'),
// // //               content:
// // //                   Text('Please grant permission to write to external storage.'),
// // //               actions: [
// // //                 TextButton(
// // //                   child: Text('OK'),
// // //                   onPressed: () {
// // //                     Navigator.of(context).pop();
// // //                   },
// // //                 ),
// // //               ],
// // //             );
// // //           },
// // //         );
// // //       }
// // //     }
// // //   }
// // //
// // //   void _createCSVFile() async {
// // //     final fileName =
// // //         '${selectedSubject}_${selectedDate}_${_formatTimeOfDay(startTime)}-${_formatTimeOfDay(endTime)}.csv';
// // //
// // //     final directory = await getApplicationDocumentsDirectory();
// // //     final path = '${directory.path}/$fileName';
// // //
// // //     // Retrieve attendance data from Firestore
// // //     final attendanceData = await FirebaseFirestore.instance
// // //         .collection('attendance')
// // //         .where('subject', isEqualTo: selectedSubject)
// // //         .where('date', isEqualTo: selectedDate)
// // //         .where('startTime', isEqualTo: _formatTimeOfDay(startTime))
// // //         .where('endTime', isEqualTo: _formatTimeOfDay(endTime))
// // //         .get();
// // //
// // //     // Convert attendance data to CSV format
// // //     List<List<dynamic>> csvData = [];
// // //     csvData.add(['Email', 'Subject', 'DateTime']); // Header row
// // //
// // //     attendanceData.docs.forEach((doc) {
// // //       final email = doc['email'];
// // //       final subject = doc['subject'];
// // //       final dateTime = doc['dateTime'];
// // //       csvData.add([email, subject, dateTime]);
// // //     });
// // //
// // //     // Generate CSV file
// // //     String csvString = const ListToCsvConverter().convert(csvData);
// // //     File csvFile = File(path);
// // //     await csvFile.create(recursive: true);
// // //     await csvFile.writeAsString(csvString);
// // //
// // //     // Show a dialog to inform the user about the download
// // //     showDialog(
// // //       context: context,
// // //       builder: (context) {
// // //         return AlertDialog(
// // //           title: Text('Attendance CSV'),
// // //           content: Text('Attendance has been saved as $fileName.'),
// // //           actions: [
// // //             TextButton(
// // //               child: Text('OK'),
// // //               onPressed: () {
// // //                 Navigator.of(context).pop();
// // //               },
// // //             ),
// // //           ],
// // //         );
// // //       },
// // //     );
// // //   }
// // // }
// //
// import 'package:flutter/material.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:pu_attendance/main.dart';
// import 'package:pu_attendance/studhome.dart';
// import 'package:pu_attendance/subjectname.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:csv/csv.dart';
// import 'dart:io';
// import 'package:permission_handler/permission_handler.dart';
//
// class CrHomePage extends StatefulWidget {
//   const CrHomePage({Key? key}) : super(key: key);
//
//   @override
//   State<CrHomePage> createState() => _CrHomePageState();
// }
//
// class _CrHomePageState extends State<CrHomePage> {
//   final FirebaseAuth _auth = FirebaseAuth.instance;
//   String selectedSubject = '';
//   late DateTime selectedDate;
//   late TimeOfDay startTime;
//   late TimeOfDay endTime;
//
//   @override
//   void initState() {
//     super.initState();
//     selectedDate = DateTime.now();
//     startTime = TimeOfDay.now();
//     endTime = TimeOfDay.now();
//     selectedSubject = 'OT'; // Set default selection to 'OT'
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text('CR Dashboard'),
//         backgroundColor: Theme.of(context).colorScheme.inversePrimary,
//         automaticallyImplyLeading: false,
//         actions: [
//           IconButton(
//             icon: Icon(Icons.logout),
//             onPressed: _logout,
//           ),
//         ],
//       ),
//       body: Center(
//         child: Padding(
//           padding: const EdgeInsets.all(16.0),
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.center,
//             children: [
//               DropdownButton<String>(
//                 value: selectedSubject,
//                 items: [
//                   for (String subject in SubjectData.subjects)
//                     DropdownMenuItem(child: Text(subject), value: subject),
//                 ],
//                 onChanged: (String? value) {
//                   setState(() {
//                     selectedSubject = value!;
//                   });
//                 },
//                 hint: Text('Select Subject'),
//               ),
//               SizedBox(height: 16.0),
//               ElevatedButton(
//                 onPressed: _selectDate,
//                 child: Text('Select Date'),
//               ),
//               Text('Selected Date: ${selectedDate.toString().split(' ')[0]}'),
//               SizedBox(height: 16.0),
//               ElevatedButton(
//                 onPressed: _selectStartTime,
//                 child: Text('Select Start Time'),
//               ),
//               Text('Selected Start Time: ${_formatTimeOfDay(startTime)}'),
//               SizedBox(height: 16.0),
//               ElevatedButton(
//                 onPressed: _selectEndTime,
//                 child: Text('Select End Time'),
//               ),
//               Text('Selected End Time: ${_formatTimeOfDay(endTime)}'),
//               SizedBox(height: 16.0),
//               ElevatedButton(
//                 onPressed: _generateAttendanceCSV,
//                 child: Text('View Attendance'),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
//
//   void _logout() async {
//     await _auth.signOut();
//     Navigator.of(context).pushAndRemoveUntil(
//       MaterialPageRoute(builder: (_) => MyHomePage(title: 'M.Sc. Attendance')),
//       (Route<dynamic> route) => false,
//     );
//   }
//
//   Future<void> _selectDate() async {
//     final DateTime? picked = await showDatePicker(
//       context: context,
//       initialDate: selectedDate,
//       firstDate: DateTime.now(),
//       lastDate: DateTime(2100),
//     );
//     if (picked != null && picked != selectedDate) {
//       setState(() {
//         selectedDate = picked;
//       });
//     }
//   }
//
//   Future<void> _selectStartTime() async {
//     final TimeOfDay? picked = await showTimePicker(
//       context: context,
//       initialTime: startTime,
//     );
//     if (picked != null) {
//       setState(() {
//         startTime = picked;
//       });
//     }
//   }
//
//   Future<void> _selectEndTime() async {
//     final TimeOfDay? picked = await showTimePicker(
//       context: context,
//       initialTime: endTime,
//     );
//     if (picked != null) {
//       setState(() {
//         endTime = picked;
//       });
//     }
//   }
//
//   String _formatTimeOfDay(TimeOfDay time) {
//     final hour = time.hour.toString().padLeft(2, '0');
//     final minute = time.minute.toString().padLeft(2, '0');
//     return '$hour:$minute';
//   }
//
//   Future<void> _generateAttendanceCSV() async {
//     // Check if permission is granted
//     if (await Permission.storage.isGranted) {
//       // Permission already granted, continue with generating the CSV file
//       _createCSVFile();
//     } else {
//       // Permission not granted, request permission
//       var status = await Permission.storage.request();
//       if (status.isGranted) {
//         // Permission granted, continue with generating the CSV file
//         _createCSVFile();
//       } else {
//         // Permission denied, show an error message
//         showDialog(
//           context: context,
//           builder: (context) {
//             return AlertDialog(
//               title: Text('Permission Denied'),
//               content:
//                   Text('Please grant permission to write to external storage.'),
//               actions: [
//                 TextButton(
//                   child: Text('OK'),
//                   onPressed: () {
//                     Navigator.of(context).pop();
//                   },
//                 ),
//               ],
//             );
//           },
//         );
//       }
//     }
//   }
//
//   void _createCSVFile() async {
//     final fileName =
//         '${selectedSubject}_${selectedDate}_${_formatTimeOfDay(startTime)}-${_formatTimeOfDay(endTime)}.csv';
//
//     final directory = await getExternalStorageDirectory();
//     final path = '${directory!.path}/Download/PU Attendance/$fileName';
//
//     // Retrieve attendance data from Firestore
//     final attendanceData = await FirebaseFirestore.instance
//         .collection('attendance')
//         .where('subject', isEqualTo: selectedSubject)
//         .where('date', isEqualTo: selectedDate)
//         .where('startTime', isEqualTo: _formatTimeOfDay(startTime))
//         .where('endTime', isEqualTo: _formatTimeOfDay(endTime))
//         .get();
//
//     // Convert attendance data to CSV format
//     List<List<dynamic>> csvData = [];
//     csvData.add(['Email', 'Subject', 'DateTime']); // Header row
//
//     attendanceData.docs.forEach((doc) {
//       final email = doc['email'];
//       final subject = doc['subject'];
//       final dateTime = doc['dateTime'];
//       csvData.add([email, subject, dateTime]);
//     });
//
//     // Generate CSV file
//     String csvString = const ListToCsvConverter().convert(csvData);
//     File csvFile = File(path);
//     await csvFile.create(recursive: true);
//     await csvFile.writeAsString(csvString);
//
//     // Show a dialog to inform the user about the download
//     showDialog(
//       context: context,
//       builder: (context) {
//         return AlertDialog(
//           title: Text('Attendance CSV'),
//           content: Text(
//               'Attendance has been saved as $fileName in Downloads/PU Attendance directory.'),
//           actions: [
//             TextButton(
//               child: Text('OK'),
//               onPressed: () {
//                 Navigator.of(context).pop();
//               },
//             ),
//           ],
//         );
//       },
//     );
//   }
// }
//
// // Work
